<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="NoticeMapper">

	<resultMap id="NoticeResultMap" type="NoticeDTO">
		<id property="noticeNum" column="notice_num" />
		<result property="memberNum" column="member_num" />
		<result property="memberName" column="member_name" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="views" column="views" />
		<result property="createdAt" column="created_at" />
	</resultMap>

	<insert id="insert" parameterType="NoticeDTO">
		<selectKey keyProperty="noticeNum" resultType="Long" order="BEFORE">
			SELECT NOTICE_SEQ.NEXTVAL FROM DUAL
		</selectKey>

		INSERT INTO notice 
			(notice_num, member_num, title, content, views, created_at)
		VALUES
			(#{noticeNum}, #{memberNum}, #{title}, #{content}, #{views}, #{createdAt})
	</insert>

	<select id="getNoticeByNum" parameterType="Long" resultMap="NoticeResultMap">
		SELECT *
		FROM notice
		WHERE notice_num = #{noticeNum}
	</select>


	<select id="getNoticeList" resultMap="NoticeResultMap">
		SELECT *
		FROM notice
	</select>

	<select id="getNoticeDetailsByNum" parameterType="Long" resultMap="NoticeResultMap">
		SELECT
			N.notice_num as notice_num,
			N.member_num as member_num,
			N.title as title,
			N.content as content,
			N.views as views,
			N.created_at as created_at,
			M.member_name as member_name
		FROM notice N
		LEFT OUTER JOIN member M
		ON N.member_num = M.member_num
		WHERE N.notice_num = #{noticeNum}
	</select>
	
	<select id="countNotice" resultType="java.lang.Integer">
		SELECT COUNT(DISTINCT N.notice_num)
		FROM notice N
	</select>
	
	<select id="getNoticeDetailsList" resultMap="NoticeResultMap">
	<![CDATA[
		SELECT *
		FROM
		(	
			SELECT ROWNUM rnum, subq.*
			FROM
			(
				SELECT
					N.notice_num as notice_num,
					N.member_num as member_num,
					N.title as title,
					N.content as content,
					N.views as views,
					N.created_at as created_at,
					M.member_name as member_name
				FROM notice N
				LEFT OUTER JOIN member m
				ON N.member_num = M.member_num
				ORDER BY notice_num DESC
			) subq
			WHERE ROWNUM <= (#{page} * #{size})
		)
		WHERE rnum >= ((#{page} - 1) * #{size}) + 1
	]]>
	</select>

	<update id="update" parameterType="NoticeDTO">
		UPDATE notice
		SET
			title = #{title},
			content = #{content}
		WHERE notice_num = #{noticeNum}
	</update>

	<delete id="delete" parameterType="Long">
		DELETE FROM notice WHERE notice_num = #{noticeNum}
	</delete>
	
	<update id="increaseViews" parameterType="Long">
	   UPDATE notice
	   SET
	       views = views+1
	   WHERE notice_num = #{noticeNum}
	</update>
	
	<select id="getNoticeDetailsListByMemberName" parameterType="hashMap" resultMap="NoticeResultMap">
	<![CDATA[
		SELECT *
		FROM
		(	
			SELECT ROWNUM rnum, subq.*
			FROM
			(
				SELECT
					N.notice_num as notice_num,
					N.member_num as member_num,
					N.title as title,
					N.content as content,
					N.views as views,
					N.created_at as created_at,
					M.member_name as member_name
				FROM notice N
				LEFT OUTER JOIN member m
				ON N.member_num = M.member_num
				WHERE member_name LIKE #{name}
				ORDER BY notice_num DESC
			) subq
			WHERE ROWNUM <= (#{page} * #{size})
		)
		WHERE rnum >= ((#{page} - 1) * #{size}) + 1
	]]>
	</select>
	
	<select id="countNoticeByMemberName" parameterType = "String" resultType="java.lang.Integer">
		SELECT COUNT(DISTINCT N.notice_num)
		FROM notice n
		left outer join member m 
		on n.member_num = m.member_num
		WHERE member_name like #{memberName}
	</select>
	
	<select id="getNoticeDetailsListContentLike" parameterType="hashMap" resultMap="NoticeResultMap">
	<![CDATA[
		SELECT *
		FROM
		(	
			SELECT ROWNUM rnum, subq.*
			FROM
			(
				SELECT
					N.notice_num as notice_num,
					N.member_num as member_num,
					N.title as title,
					N.content as content,
					N.views as views,
					N.created_at as created_at,
					M.member_name as member_name
				FROM notice N
				LEFT OUTER JOIN member m
				ON N.member_num = M.member_num
				WHERE title LIKE #{content} or content LIKE #{content}
				ORDER BY notice_num DESC
			) subq
			WHERE ROWNUM <= (#{page} * #{size})
		)
		WHERE rnum >= ((#{page} - 1) * #{size}) + 1
	]]>
	</select>
	
	<select id="countNoticeContentLike" parameterType = "String" resultType="java.lang.Integer">
		SELECT COUNT(DISTINCT N.notice_num)
		FROM notice n
		left outer join member m 
		on n.member_num = m.member_num
		WHERE title LIKE #{content} or content LIKE #{content}
	</select>
	
	<select id="getAllNotices" resultType="NoticeDTO" parameterType="int" >
		SELECT *
		FROM notice 
		where member_num = #{member_num}
	</select>
	
	

</mapper>