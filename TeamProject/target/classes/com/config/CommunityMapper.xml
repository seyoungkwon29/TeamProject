<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="CommunityMapper">

	<resultMap id="CommunityResultMap" type="CommunityDTO">
		<id property="comNum" column="com_num" />
		<result property="memberNum" column="member_num" />
		<result property="memberName" column="member_name" />
		<result property="title" column="com_title" />
		<result property="content" column="com_content" />
		<result property="views" column="com_views" />
		<result property="createdAt" column="com_created_at" />
	</resultMap>

	<insert id="insert" parameterType="CommunityDTO">
		<selectKey keyProperty="comNum" resultType="Long" order="BEFORE">
			SELECT COMMUNITY_SEQ.NEXTVAL FROM DUAL
		</selectKey>

		INSERT INTO community
			(com_num, member_num, com_title, com_content, com_views, com_created_at)
		VALUES
			(#{comNum}, #{memberNum}, #{title}, #{content}, #{views}, #{createdAt})
	</insert>

	<select id="getCommunityByNum" parameterType="Long"
		resultMap="CommunityResultMap">
		SELECT
			com_num,
			member_num,
			com_title,
			com_content,
			com_views,
			com_created_at
		FROM community
		WHERE com_num = #{comNum}
	</select>

	<select id="getCommunityByMemberNum" parameterType="Long" resultMap="CommunityResultMap">
		SELECT
			com_num,
			member_num,
			com_title,
			com_content,
			com_views,
			com_created_at
		FROM community
		WHERE member_num = #{memberNum}
	</select>

	<select id="getCommunityList" resultMap="CommunityResultMap">
		SELECT
			com_num,
			member_num,
			com_title,
			com_content,
			com_views,
			com_created_at
		FROM community
	</select>

	<update id="update" parameterType="CommunityDTO">
		UPDATE community
		SET
			com_title = #{title},
			com_content = #{content}
		WHERE com_num = #{comNum}
	</update>

	<delete id="delete" parameterType="Long">
		DELETE FROM community WHERE com_num = #{comNum}
	</delete>

	<select id="getCommunityDetailsByNum" parameterType="Long" resultMap="CommunityResultMap">
		SELECT
			c.com_num as com_num,
			c.com_title as com_title,
			c.com_content as com_content,
			c.com_views as com_views,
			c.com_created_at as com_created_at,
			m.member_num as member_num,
			m.member_name as member_name
		FROM community c
		INNER JOIN member m
		ON c.member_num = m.member_num
		WHERE c.com_num = #{comNum}
	</select>

	<update id="increaseViews" parameterType="Long">
	   UPDATE community
	   SET
	       com_views = com_views+1
	   WHERE com_num = #{comNum}
	</update>

	<select id="count" resultType="java.lang.Integer">
		SELECT COUNT(DISTINCT C.com_num)
		FROM community C
	</select>
	
	<select id="getCommunityDetailsList" resultMap="CommunityResultMap">
	<![CDATA[
		SELECT *
		FROM
		(
			SELECT ROWNUM rnum , subq.*
			FROM 
			(
				SELECT
					C.com_num as com_num,
					C.com_title as com_title,
					C.com_content as com_content,
					C.com_views as com_views,
					C.com_created_at as com_created_at,
					M.member_num as member_num,
					M.member_name as member_name
				FROM community C
				INNER JOIN member M
				ON C.member_num = M.member_num
				ORDER BY com_num DESC
			) subq
			WHERE ROWNUM <= (#{page} * #{size})
		)
		WHERE rnum >= ((#{page} - 1) * #{size}) + 1
	]]>
	</select>
	
	<select id="getCommunityDetailsListByMemberName"  parameterType="hashMap" resultMap="CommunityResultMap">
	<![CDATA[
		SELECT *
		FROM
		(
			SELECT ROWNUM rnum , subq.*
			FROM 
			(
				SELECT
					C.com_num as com_num,
					C.com_title as com_title,
					C.com_content as com_content,
					C.com_views as com_views,
					C.com_created_at as com_created_at,
					M.member_num as member_num,
					M.member_name as member_name
				FROM community C
				INNER JOIN member M
				ON C.member_num = M.member_num
				WHERE member_name LIKE #{name}
				ORDER BY com_num DESC
			) subq
			WHERE ROWNUM <= (#{page} * #{size})
		)
		WHERE rnum >= ((#{page} - 1) * #{size}) + 1
	]]>
	</select>
	
	<select id="countByMemberName" parameterType = "String" resultType="java.lang.Integer">
		SELECT COUNT(DISTINCT C.com_num)
		FROM community c
		left outer join member m 
		on c.member_num = m.member_num
		WHERE member_name like #{memberName}
	</select>
	
	<select id="getCommunityDetailsListContentLike"  parameterType="hashMap" resultMap="CommunityResultMap">
	<![CDATA[
		SELECT *
		FROM
		(
			SELECT ROWNUM rnum , subq.*
			FROM 
			(
				SELECT
					C.com_num as com_num,
					C.com_title as com_title,
					C.com_content as com_content,
					C.com_views as com_views,
					C.com_created_at as com_created_at,
					M.member_num as member_num,
					M.member_name as member_name
				FROM community C
				INNER JOIN member M
				ON C.member_num = M.member_num
				WHERE com_title LIKE #{content} or com_content LIKE #{content}
				ORDER BY com_num DESC
			) subq
			WHERE ROWNUM <= (#{page} * #{size})
		)
		WHERE rnum >= ((#{page} - 1) * #{size}) + 1
	]]>
	</select>
	
	<select id="countContentLike" parameterType = "String" resultType="java.lang.Integer">
		SELECT COUNT(DISTINCT C.com_num)
		FROM community c
		left outer join member m 
		on c.member_num = m.member_num
		WHERE com_title LIKE #{content} or com_content LIKE #{content}
	</select>
</mapper>